<VirtualHost *:80>
ServerName www.wfb.pr.rt.ru
ServerAlias wfb.pr.rt.ru
DocumentRoot /var/www/pr.rt.ru/wfb/public
    <IfModule mod_rewrite.c>

      RewriteEngine   On

      #RewriteLog      "/www/имя_сайта/logs/rewrite_log"
      #RewriteLogLevel 9

      # произведем обработку запроса
      # уберём подряд идущие слэши
      #RewriteRule (.*)/(/.*)  $1$2 [N]
          
      # если какой либо элемент, название директории или имя файла, начинается с точки [.]
      # то это считается служебным ресурсом и доступ к нему с клиентской стороны НЕвозможен
      # кстати "так думают" ещё ls НЕ показывая по умолчанию такие файлы и samba, которая 
      # добавляет к таким файлам атрибут hidden
      #RewriteRule ^(.*/)\.(.*) %{REQUEST_FILENAME} [G]

      # физические файлы и директории (в случае наличия DefaultIndex)
      # имеют абсолютный приоритет

      # если то, что просят, это физический файл,
      #RewriteCond  %{DOCUMENT_ROOT}%{REQUEST_FILENAME} -f
      # то отдаем как есть  и останавливаемся
      #RewriteRule ^ %{REQUEST_FILENAME} [L]
      
      # это не файл - пытаемся думать, что это директория

      # если не было слеша в конце, то делаем редирект
      # прилепляя слеш в конец запроса - т.о. пользователь увидит "красивый" адрес
      # фактически это может произойти только один раз - если запрос не файл,
      # и в конце нет слеша (то, что после ? и сам ? НЕ учитывается!)
      # кстати - [R,L] можно убрать,
      #RewriteRule [^\/]$ %{REQUEST_FILENAME}/
      # и тогда итоговый URL для пользователя будет больше походить на путь к
      # виртуальному файлу, чем к виртуальной директории :) и это можно красиво использовать!
      #RewriteRule [^\/]$ %{REQUEST_FILENAME}/ [R,L]

      # если то, что просят, это физическая директория,
      #RewriteCond  %{DOCUMENT_ROOT}%{REQUEST_FILENAME} -d
      # и в ней есть DefaultIndex файл
      #RewriteCond  %{DOCUMENT_ROOT}%{REQUEST_FILENAME}index.html -f
      # то передаём на исполнение этот файл
      #RewriteRule ^ %{REQUEST_FILENAME}index.html [L]

      # если то, что просят, это физическая директория,
      #RewriteCond  %{DOCUMENT_ROOT}%{REQUEST_FILENAME} -d
      # НО в ней НЕТ DefaultIndex файл
      #RewriteCond  %{DOCUMENT_ROOT}%{REQUEST_FILENAME}index.html !-f
      # то передаём на исполнение сообщение об отказе в доступе
      #RewriteRule ^ %{REQUEST_FILENAME} [F]
                                                                          
      # и, если запрос содержит более одной директории,
      # то, зацикливаем анализ, откинув последнюю директорию
      #RewriteRule (/.*/)(.*/)$  $1  [N]
      # ОБРАТИТЕ ВНИМАНИЕ! Данная конструкция может добавить ненужную нагрузку на сервер,
      # если Вы используете достаточно длинные (с большим количеством вложенных поддиректорий)
      # URL`ы, ведь на каждый запрос она будет производить разложение на составляющие
      # и анализ каждой из них, по вышеописанным правилам, поэтому,
      # если вам нужны виртуальные сайты с виртуальными директориями в пределах сайта
      # (что это такое - см. ниже :), то только тогда "раскоментарьте" это правило!

      # а тут оседают все остальные обращения к сайту
      # RewriteRule ^ /index.php [L]

    # Handle Front Controller...
      RewriteCond %{REQUEST_FILENAME} !-d
      RewriteCond %{REQUEST_FILENAME} !-f
      RewriteRule ^ /index.php [L]

      # Принцип работы:
      # 1. Если то что просят файл - всё остаётся как есть.
      # 2. Если то что просят директория, и там есть DefaultIndex файл, то управление на него.
      # 3. Если дошли до этого шага? значит это и есть "виртуальная" директория -
      #    теперь нужно теперь найти обработчик для неё. Можно задать его жестко,
      #    н.п. как DefaultIndex-файл, находящийся в корне сайта,
      #    но можно добавить нашему ReWrite`у немного интеллекта - 
      #    пусть он попытается подняться вверх по предполагаемому дереву каталогов,
      #    и там поискать, по правилу п/п 1 и 2, т.е. зациклим анализ;
      # 4. Если подниматься больше некуда (или мы и находились в корне), то данную 
      #    "виртуальную" директорию будет обрабатывать DefaultIndex-файл корня сайта.
      #
      # В итоге мы получим сайт с "виртуальными" директориями, но если часть структуры
      # сайта построена физически, то это будет как бы сайт в сайте, т.е. если URL выглядит как
      # /test/бла/бла/, и директория /test/ физическая и в ней есть DefaultIndex-файл,
      # то именно он получит управление, а не корневой DefaultIndex-файл.
      #
      # Конечно для Ваших задач может понадобиться
      # другое решение - ReWrite наверняка с ним справится! :)

    </IfModule>
#ErrorLog "/var/www/pr.rt.ru/wfb/error.log"
#CustomLog /var/www/pr.rt.ru/requests.log combined
</VirtualHost>

